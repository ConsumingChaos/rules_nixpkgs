load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@nixpkgs_packages//:defs.bzl", "nix_pkg")
load(":location_expansion_unit_test.bzl", "expand_location_unit_test_suite")
load(":module_registry_tests.bzl", "module_registry_test_suite")

package(default_testonly = 1)

expand_location_unit_test_suite()

[
    # All of these tests use the "hello" binary to see
    # whether different invocations of `nixpkgs_package`
    # produce a valid bazel repository.
    sh_test(
        name = "run-{0}".format(test),
        timeout = "short",
        srcs = ["test_bin.sh"],
        args = ["$(location {0})".format(nix_pkg("rules_nixpkgs_core_testing", test, "//:bin"))],
        data = [nix_pkg("rules_nixpkgs_core_testing", test, "//:bin")],
    )
    for test in [
        "hello",
        "attribute-test",
        "nixpkgs-git-repository-test",
        "nixpkgs-http-repository-test",
        "nixpkgs-file-repository-test",
        "nixpkgs-local-repository-test",
        "nix-file-test",
        "nix-file-deps-test",
        "expr-test",
        "expr-attribute-test",
        "relative-imports",
        "extra-args-test",
        "flake-hello",
        "flake-hello-with-build-file",
    ]
] + [
    # These tests use the nix package generated by ./output.nix

    # Checks whether the `:include` filegroup of `nixpkgs_package`
    # repositories works as intended
    # (that the expected number of files are inside the target)
    sh_test(
        name = "run-test-include",
        timeout = "short",
        srcs = ["test_output.sh"],
        args = [
            "2",
            "$(locations {})".format(nix_pkg("rules_nixpkgs_core_testing", "output-filegroup-test", "//:include")),
        ],
        data = [nix_pkg("rules_nixpkgs_core_testing", "output-filegroup-test", "//:include")],
    ),

    # Checks whether specifying a manual filegroup in the
    # `nixpkgs_package` BUILD file works as well.
    sh_test(
        name = "run-test-manual-filegroup",
        timeout = "short",
        srcs = ["test_output.sh"],
        args = [
            "3",
            "$(locations {})".format(nix_pkg("rules_nixpkgs_core_testing", "output-filegroup-manual-test", "//:manual-filegroup")),
        ],
        data = [nix_pkg("rules_nixpkgs_core_testing", "output-filegroup-manual-test", "//:manual-filegroup")],
    ),
]

# Test nixopts location expansion
test_suite(
    name = "location-expansion-test",
    tests = [
        "location-expansion-test-arg-external",
        "location-expansion-test-arg-local",
        "location-expansion-test-argstr-external",
        "location-expansion-test-argstr-local",
    ],
)

diff_test(
    name = "location-expansion-test-arg-local",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/arg_local_file",
)

diff_test(
    name = "location-expansion-test-arg-external",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/arg_external_file",
)

diff_test(
    name = "location-expansion-test-argstr-local",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/argstr_local_file",
)

diff_test(
    name = "location-expansion-test-argstr-external",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/argstr_external_file",
)

module_registry_test_suite(name = "module_registry_test_suite")
