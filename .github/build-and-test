#! /usr/bin/env nix-shell
#! nix-shell ../shell.nix -i bash

set -euo pipefail

declare SCRIPT_DIR

SCRIPT_DIR="$( realpath "${BASH_SOURCE[0]}" )"
SCRIPT_DIR="${SCRIPT_DIR%/*}"

cd "$( dirname "$SCRIPT_DIR" )"

declare -a FAILURES=( )

function on_exit() {
    echo
    if [[ "${#FAILURES[@]}" -gt 0 ]]; then
        echo "error: running tests in ${FAILURES[@]} was not successful"
        exit 1
    elif [[ $? -eq 0 ]]; then
        echo "all tests passed."
    fi
} >&2

trap on_exit EXIT

if [[ ${BZLMOD_ENABLED-} = true ]]; then
    declare -ra build_dirs=(
        core
        toolchains/java
    )
    declare -ra test_dirs=(
        testing/core
        testing/java
    )
    # Skip docs directories in bzlmod mode.
    # Stardoc is not yet bzlmod compatible.
    declare -ra extra_flags=(
        --enable_bzlmod
        --registry=file://$SCRIPT_DIR/../registry
        --registry=https://bcr.bazel.build
        --deleted_packages=docs
    )
else
    declare -ra build_dirs=(
        core
    )
    declare -ra test_dirs=(
        .
        toolchains/go
        toolchains/java
        toolchains/cc
        toolchains/python
        toolchains/posix
        toolchains/rust
        toolchains/nodejs
        testing/core
        testing/java
    )
    declare -ra extra_flags=(
    )
fi

run_command() {
    local -r cmd=$1
    local -r dir=$2

    echo "::group::Running \`bazel $1\` in $dir"

    pushd $dir >/dev/null
    if ! bazel $1 //... "${extra_flags[@]}" ; then
        FAILURES+=( "$dir" )
    fi
    bazel shutdown
    popd >/dev/null

    echo '::endgroup::'
}

for dir in "${build_dirs[@]}"; do
    # bazel test //... fails in modules that don't define any test targets, use
    # bazel build in those instead. Workaround for
    # https://github.com/bazelbuild/bazel/issues/7291#issuecomment-1283970438
    run_command build $dir
done

for dir in "${test_dirs[@]}"; do
    run_command test $dir
done
